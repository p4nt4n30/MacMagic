#!/usr/bin/env ruby
#title           :macmagic
#description     :This application will spoof your mac address
#author		 	 :p4nT4N30
#date            :20160725
#version         :1.0
#usage		     :bash (sudo) macmagic [options]
#notes           :
#####################################################################################

require "optparse"

module MacMagic
	$argv = ARGV
	$options = {}
	$curMac
	class Application
		def run(argv)
			parse_options(argv)
			#puts $options
			if options_validation
				cm=getcurrentmac($options[:interface])
				puts "Current MAC: #{cm}"
				interfaceDown($options[:interface])
				puts
				setMac
				interfaceUp($options[:interface])
				puts
				cm=getcurrentmac($options[:interface])
				puts "Current MAC: #{cm}"
			end

		end

		def parse_options(argv)
			OptionParser.new do |opts|
				opts.banner = "Usage: (sudo) macmagic [options]"

				opts.on("-h","--help","Prints this help") do
					puts opts
					$options[:help] = '1'
					exit
				end
				opts.on("-V","--Version","Displays version and date of release") do
					puts "Version: 1.0"
					puts "Release Date: 07/26/2016"
					exit
				end
				opts.on("-i","--interface=INTERFACE","Interface") do |i|
					$options[:interface] = i
				end
				opts.on("-s","--search-oui=Vendor","Search OUI List for vendor Example: ASUS*") do |s|
					#so = s
					#puts s
					system "grep -E '(hex)' /usr/bin/MacMagic/oui.txt | grep -n '#{s}' | sed 's/.*://'"
					exit
				end
				opts.on("-l","--list-oui","List oui's (Vendor ID)") do
					system 'grep -E "(hex)" /usr/bin/MacMagic/oui.txt | sed "s/.*://" | less'
					exit
				end
				opts.on("-m","--mac=MAC","MAC Address. FORMAT 00:00:00:00:00:00") do |m|
					$options[:mac] = m
				end
				opts.on("-p","--mac-prefix=MACPREFIX","First 3 octets of MAC Address (OUI). The last 3 octets will be random. FORMAT 00:00:00") do |p|
					$options[:prefix] = p
				end
			end.parse!
		end

		def options_validation()
			if $options[:interface].nil?
				puts "You need to at least supply an interface that you want to change the MAC Address of. Use -i [interface]"
				puts
				puts "Or run the help menu macmagic -h"
				exit
			else
				r = true
			end

			if !$options[:mac].nil?
				mac = $options[:mac].split(':')
				if mac.length != 6
					puts "You have supply the incorrect number of octets for a valid MAC address. FORMAT 00:00:00:00:00:00"
					exit
				end
			end

			if !$options[:prefix].nil?
				prefix = $options[:prefix].split(':')
				if prefix.length != 3
					puts "The MAC Prefix needs to be 3 octets, FORMAT 00:00:00"
					exit
				end
			end

			if r == true
				return true
			end
		end

		def getcurrentmac(input)
			$curMac = `ifconfig #{input} | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'`
			return $curMac
		end

		def interfaceDown(input)
			system "ifconfig #{input} down"
			puts "Interface #{input} is down!"
			sleep(3)
		end

		def interfaceUp(input)
			system "ifconfig #{input} up"
			puts "Interface #{input} is up!"
			sleep(3)
		end

		def randomMac()
			rMac = 6.times.map { '%02xc' % rand(0..255)}.join(':')
			rMac[1] = '0'
			#puts rMac
			return rMac
		end

		def setMac()
			if $options[:mac].nil? && $options[:prefix].nil?
				newmac=randomMac
            elsif !$options[:prefix].nil?
				#puts "prefix is not nill"
				rMac = 3.times.map { '%02x' % rand(0..255)}.join(':')
				newmac=$options[:prefix]+rMac
			else
				newmac=$options[:mac]
			end
			system "ifconfig #{$options[:interface]} hw ether #{newmac.downcase}"
		end
	end
end


o=MacMagic::Application.new

o.run($argv)
